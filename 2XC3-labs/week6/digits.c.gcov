        -:    0:Source:digits.c
        -:    0:Graph:testdigits-digits.gcno
        -:    0:Data:testdigits-digits.gcda
        -:    0:Runs:1
        -:    1:/* Starter code for Lab 6.1 Activity
        -:    2: *
        -:    3: * This file will not compile as is. You need to create the digits function.
        -:    4: *
        -:    5: */
        -:    6:#include <stdio.h>
        -:    7:#include <stdlib.h>
        -:    8:#include "digits.h"
        -:    9:
        -:   10:/* Main function. Runs test cases for the digits function.
        -:   11: * Exits with failure code on first test case fail.
        -:   12: * Otherwise exits with success.
        -:   13: */
        -:   14:
        -:   15:int digits(long, int*, int*); // Function prototype
        -:   16:
        -:   17://digits implementation
        1:   18:int digits(long n, int *max, int *min) {
        1:   19:    int sum = 0;
        -:   20:    int digit;
        -:   21:
        -:   22:
        -:   23:
        -:   24:   //Handle negative numbers by converting to positive.
        1:   25:   if (n < 0) {
    #####:   26:         n = -n;
        -:   27:   }
        -:   28:
        -:   29:   //If n equals 0, set max and min equals 0, and return 0.
        1:   30:   if (n == 0) {
    #####:   31:           *min = 0;
    #####:   32:           *max = 0;
    #####:   33:           return 0;
        -:   34:   }
        -:   35:
        -:   36:
        -:   37:   //Initialize min and max
        1:   38:   *min = 9;
        1:   39:   *max = 0;
        -:   40:
        5:   41:   while (n > 0) {
        4:   42:       digit = n % 10; //Get the rightmost digit.
        4:   43:       sum += digit; //Add digit to sum.
        -:   44:
        -:   45:
        -:   46:   //update max and min
        4:   47:   if (digit > *max) {
        1:   48:       *max = digit;
        -:   49:   }
        -:   50:
        4:   51:   if (digit < *min) {
        4:   52:       *min = digit;
        -:   53:   }
        -:   54:
        4:   55:   n = n / 10; //remove the rightmost digit.
        -:   56:
        -:   57:   }
        1:   58:   return sum;
        -:   59:}
        -:   60:                       
